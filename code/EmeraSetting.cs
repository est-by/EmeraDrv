//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Пространство имен Sys.Services.Drv
namespace Sys.Services.Drv {
    using System;
    
    
    /// <summary>
    /// предусмотрено 2 уровня доступа – основной и вспомогательный
    /// </summary>
    public enum EmeraProtectLevel : byte {
        
        /// <summary>
        /// Уровень отсутствует
        /// </summary>
        None = 2,
        
        /// <summary>
        /// Основной уровень позволяет модифицировать все параметры, отмеченные знаком ‘+’ в полях                    ‘Модификация’ и ‘Обнуление’ таблицы A.1 приложения А
        /// </summary>
        Base = 0,
    }
    
    /// <summary/>
    public partial class EmeraSharedSetting : Sys.Encodeable.IEncodeableObject {
        
        /// <summary>
        /// Поле для свойства Включить корректировку времени
        /// </summary>
        private bool _enbltimecorr = true;
        
        /// <summary>
        /// Поле для свойства Включить опрос трехминутных значений
        /// </summary>
        private bool _enbl3min = false;
        
        /// <summary>
        /// Поле для свойства Включить опрос событий
        /// </summary>
        private bool _enblevents;
        
        /// <summary>
        /// Поле для свойства Включить опрос мгновенных значений
        /// </summary>
        private bool _enblim = false;
        
        /// <summary>
        /// Поле для свойства Уровень доступа. Если включен то                    система производит установку времени если нет корректировку
        /// </summary>
        private Sys.Services.Drv.EmeraProtectLevel _level = Sys.Services.Drv.EmeraProtectLevel.None;
        
        /// <summary>
        /// Поле для свойства Пароль по умолчанию
        /// </summary>
        private string _psw = "00000000";
        
        /// <summary>
        /// Поле для свойства Рассписание синхронизации архивных данных
        /// </summary>
        private Sys.Types.Components.ScheduleDbWrap _arch;
        
        /// <summary>
        /// Поле для свойства Рассписание чтения мгновенных значений
        /// </summary>
        private Sys.Types.Components.ScheduleDbWrap _im;
        
        /// <summary>
        /// Интернал конструктор
        /// </summary>
        internal EmeraSharedSetting(bool enblTimeCorr, bool enbl3min, bool enblEvents, bool enblIm, Sys.Services.Drv.EmeraProtectLevel level, string psw, Sys.Types.Components.ScheduleDbWrap arch, Sys.Types.Components.ScheduleDbWrap im) {
            this.EnblTimeCorr = enblTimeCorr;
            this.Enbl3min = enbl3min;
            this.EnblEvents = enblEvents;
            this.EnblIm = enblIm;
            this.Level = level;
            this.Psw = psw;
            this.Arch = arch;
            this.Im = im;
        }
        
        /// <summary>
        /// Публичный конструктор
        /// </summary>
        public EmeraSharedSetting() {
        }
        
        /// <summary>
        /// Свойство Включить корректировку времени
        /// </summary>
        public virtual bool EnblTimeCorr {
            get {
                return _enbltimecorr;
            }
            set {
                this._enbltimecorr = value;
            }
        }
        
        /// <summary>
        /// Свойство Включить опрос трехминутных значений
        /// </summary>
        public virtual bool Enbl3min {
            get {
                return _enbl3min;
            }
            set {
                this._enbl3min = value;
            }
        }
        
        /// <summary>
        /// Свойство Включить опрос событий
        /// </summary>
        public virtual bool EnblEvents {
            get {
                return _enblevents;
            }
            set {
                this._enblevents = value;
            }
        }
        
        /// <summary>
        /// Свойство Включить опрос мгновенных значений
        /// </summary>
        public virtual bool EnblIm {
            get {
                return _enblim;
            }
            set {
                this._enblim = value;
            }
        }
        
        /// <summary>
        /// Свойство Уровень доступа. Если включен то                    система производит установку времени если нет корректировку
        /// </summary>
        public virtual Sys.Services.Drv.EmeraProtectLevel Level {
            get {
                return _level;
            }
            set {
                this._level = value;
            }
        }
        
        /// <summary>
        /// Свойство Пароль по умолчанию
        /// </summary>
        public virtual string Psw {
            get {
                return _psw;
            }
            set {
                this._psw = value;
            }
        }
        
        /// <summary>
        /// Свойство Рассписание синхронизации архивных данных
        /// </summary>
        public virtual Sys.Types.Components.ScheduleDbWrap Arch {
            get {
                return _arch;
            }
            set {
                this._arch = value;
            }
        }
        
        /// <summary>
        /// Свойство Рассписание чтения мгновенных значений
        /// </summary>
        public virtual Sys.Types.Components.ScheduleDbWrap Im {
            get {
                return _im;
            }
            set {
                this._im = value;
            }
        }
        
        #region Encode
        /// <summary>
        /// Метод сериализации
        /// </summary>
        public virtual void Encode(Sys.Encodeable.IEncoderObject value) {
            value.PushNamespace("Sys.Services.Drv");
            value.WriteBoolean("EnblTimeCorr", this.EnblTimeCorr, true);
            value.WriteBoolean("Enbl3min", this.Enbl3min, false);
            value.WriteBoolean("EnblEvents", this.EnblEvents);
            value.WriteBoolean("EnblIm", this.EnblIm, false);
            value.WriteByte("Level", ((byte)(this.Level)));
            value.WriteString("Psw", this.Psw, "00000000");
            value.WriteEncodeable<Sys.Types.Components.ScheduleDbWrap>("Arch", this.Arch);
            value.WriteEncodeable<Sys.Types.Components.ScheduleDbWrap>("Im", this.Im);
            value.PopNamespace();
        }
        #endregion
        
        /// <summary>
        /// Метод создания EmeraSharedSetting_CreateSys_Types_Components_ScheduleDbWrap
        /// </summary>
        private Sys.Types.Components.ScheduleDbWrap EmeraSharedSetting_CreateSys_Types_Components_ScheduleDbWrap() {
            return new Sys.Types.Components.ScheduleDbWrap();
        }
        
        #region Decode
        /// <summary>
        /// Метод сериализации
        /// </summary>
        public virtual void Decode(Sys.Encodeable.IDecoderObject value) {
            value.PushNamespace("Sys.Services.Drv");
            this.EnblTimeCorr = value.ReadBoolean("EnblTimeCorr", true);
            this.Enbl3min = value.ReadBoolean("Enbl3min", false);
            this.EnblEvents = value.ReadBoolean("EnblEvents");
            this.EnblIm = value.ReadBoolean("EnblIm", false);
            this.Level = ((Sys.Services.Drv.EmeraProtectLevel)(value.ReadByte("Level", ((byte)(this.Level)))));
            this.Psw = value.ReadString("Psw", "00000000");
            this.Arch = value.ReadEncodeableClass<Sys.Types.Components.ScheduleDbWrap>("Arch", this.EmeraSharedSetting_CreateSys_Types_Components_ScheduleDbWrap);
            this.Im = value.ReadEncodeableClass<Sys.Types.Components.ScheduleDbWrap>("Im", this.EmeraSharedSetting_CreateSys_Types_Components_ScheduleDbWrap);
            value.PopNamespace();
        }
        #endregion
    }
    
    /// <summary/>
    public partial class EmeraContentSetting : Sys.Encodeable.IEncodeableObject {
        
        /// <summary>
        /// Поле для свойства Адресс прибора в сети
        /// </summary>
        private int _address;
        
        /// <summary>
        /// Поле для свойства Считывать KU KI с устройства
        /// </summary>
        private bool _ku_ki_dev;
        
        /// <summary>
        /// Поле для свойства KI
        /// </summary>
        private double _ki = 1D;
        
        /// <summary>
        /// Поле для свойства KU
        /// </summary>
        private double _ku = 1D;
        
        /// <summary>
        /// Интернал конструктор
        /// </summary>
        internal EmeraContentSetting(int address, bool kU_KI_Dev, double kI, double kU) {
            this.Address = address;
            this.KU_KI_Dev = kU_KI_Dev;
            this.KI = kI;
            this.KU = kU;
        }
        
        /// <summary>
        /// Публичный конструктор
        /// </summary>
        public EmeraContentSetting() {
        }
        
        /// <summary>
        /// Свойство Адресс прибора в сети
        /// </summary>
        public virtual int Address {
            get {
                return _address;
            }
            set {
                this._address = value;
            }
        }
        
        /// <summary>
        /// Свойство Считывать KU KI с устройства
        /// </summary>
        public virtual bool KU_KI_Dev {
            get {
                return _ku_ki_dev;
            }
            set {
                this._ku_ki_dev = value;
            }
        }
        
        /// <summary>
        /// Свойство KI
        /// </summary>
        public virtual double KI {
            get {
                return _ki;
            }
            set {
                this._ki = value;
            }
        }
        
        /// <summary>
        /// Свойство KU
        /// </summary>
        public virtual double KU {
            get {
                return _ku;
            }
            set {
                this._ku = value;
            }
        }
        
        #region Encode
        /// <summary>
        /// Метод сериализации
        /// </summary>
        public virtual void Encode(Sys.Encodeable.IEncoderObject value) {
            value.PushNamespace("Sys.Services.Drv");
            value.WriteInt32("Address", this.Address);
            value.WriteBoolean("KU_KI_Dev", this.KU_KI_Dev);
            value.WriteDouble("KI", this.KI, 1D);
            value.WriteDouble("KU", this.KU, 1D);
            value.PopNamespace();
        }
        #endregion
        
        #region Decode
        /// <summary>
        /// Метод сериализации
        /// </summary>
        public virtual void Decode(Sys.Encodeable.IDecoderObject value) {
            value.PushNamespace("Sys.Services.Drv");
            this.Address = value.ReadInt32("Address");
            this.KU_KI_Dev = value.ReadBoolean("KU_KI_Dev");
            this.KI = value.ReadDouble("KI", 1D);
            this.KU = value.ReadDouble("KU", 1D);
            value.PopNamespace();
        }
        #endregion
    }
    
    /// <summary/>
    internal partial class EmeraSynchState : Sys.Encodeable.IEncodeableObject {
        
        /// <summary>
        /// Поле для свойства 
        /// </summary>
        private string _serialnumber;
        
        /// <summary>
        /// Интернал конструктор
        /// </summary>
        internal EmeraSynchState(string serialNumber) {
            this.SerialNumber = serialNumber;
        }
        
        /// <summary>
        /// Публичный конструктор
        /// </summary>
        public EmeraSynchState() {
        }
        
        /// <summary>
        /// Свойство 
        /// </summary>
        public virtual string SerialNumber {
            get {
                return _serialnumber;
            }
            set {
                this._serialnumber = value;
            }
        }
        
        #region Encode
        /// <summary>
        /// Метод сериализации
        /// </summary>
        public virtual void Encode(Sys.Encodeable.IEncoderObject value) {
            value.PushNamespace("Sys.Services.Drv");
            value.WriteString("SerialNumber", this.SerialNumber);
            value.PopNamespace();
        }
        #endregion
        
        #region Decode
        /// <summary>
        /// Метод сериализации
        /// </summary>
        public virtual void Decode(Sys.Encodeable.IDecoderObject value) {
            value.PushNamespace("Sys.Services.Drv");
            this.SerialNumber = value.ReadString("SerialNumber");
            value.PopNamespace();
        }
        #endregion
    }
}
